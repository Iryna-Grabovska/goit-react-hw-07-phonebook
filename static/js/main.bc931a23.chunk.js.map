{"version":3,"sources":["components/Section/Section.module.css","components/Input/Input.module.css","components/ContactsList/ContactsList.module.css","components/Filter/Filter.module.css","components/Button/Button.module.css","components/Section/Section.js","store/contactsSlice.js","store/contactsApi.js","components/Button/Button.js","components/Input/Input.js","components/Form/Form.js","components/ContactsList/ContactsList.js","store/filterSlice.js","components/Filter/Filter.js","App.js","store/store.js","index.js"],"names":["module","exports","Section","title","children","className","s","section","nanoid","customAlphabet","contactSlice","createSlice","name","initialState","reducers","formSubmithandle","reducer","state","action","payload","prepare","contact","id","deleteContact","filter","i","visibleContacts","value","toLowerCase","includes","actions","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","deleteContacts","mutation","url","method","invalidatesTags","createContacts","newContacts","body","useFetchContactsQuery","useDeleteContactsMutation","useCreateContactsMutation","Button","label","formButton","type","Input","labelName","onChange","nameLabel","contactsInput","Form","useState","setName","number","setNumber","nameInputId","shortid","generate","numberInputId","contacts","useSelector","useDispatch","handleChange","e","currentTarget","reset","onSubmit","preventDefault","some","alert","pattern","required","ContactsList","data","isLoading","isFetching","isDeleting","filterContact","handleDeleteContacts","a","unwrap","normalizedFilter","map","phone","contactsListItem","contactListBtn","onClick","filterSlice","changeFilter","_","console","log","Filter","dispatch","filterLabel","filterInput","target","App","store","configureStore","contactsReducer","filterContactReducer","middleware","getDefaultMiddleware","concat","setupListeners","dispach","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc931a23.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2uett\",\"title\":\"Section_title__3Qc5W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nameLabel\":\"Input_nameLabel__3_iQ_\",\"contactsInput\":\"Input_contactsInput__11Brr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactListBtn\":\"ContactsList_contactListBtn__36yeX\",\"contactsListItem\":\"ContactsList_contactsListItem__34qVP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__3s6Sx\",\"filterInput\":\"Filter_filterInput__3P-5Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formButton\":\"Button_formButton__1mgjX\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nexport default function Section({ title, children }) {\n  return (\n    <div className={s.section}>\n      {title && <h2 className={s.title}>{title}</h2>}\n      {children}\n    </div>\n  );\n}\nSection.propTypes = {\n  title: PropTypes.string,\n};\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { customAlphabet } from 'nanoid';\r\n\r\nconst nanoid = customAlphabet('0123456789', 8);\r\nconst initialState = [];\r\nconst contactSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState,\r\n  reducers: {\r\n    formSubmithandle: {\r\n      reducer: (state, action) => {\r\n        return [...state, action.payload];\r\n      },\r\n      prepare: contact => ({\r\n        payload: { ...contact, id: nanoid() },\r\n      }),\r\n    },\r\n    deleteContact: (state, action) =>\r\n      state.filter(i => i.id !== action.payload),\r\n\r\n    visibleContacts: (state, action) =>\r\n      state.filter(state =>\r\n        state.value.toLowerCase().includes(action.payload.toLowerCase()),\r\n      ),\r\n  },\r\n});\r\nexport const { formSubmithandle, deleteContact, visibleContacts } =\r\n  contactSlice.actions;\r\nexport default contactSlice.reducer;\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\nexport const contactsApi = createApi({\r\n  reducerPath: 'contactsApi',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://61b7c58b64e4a10017d18c91.mockapi.io/api/vi/' }),\r\n  tagTypes :['Contacts'],\r\n  endpoints: (builder) => ({\r\n    fetchContacts: builder.query({\r\n      query:()=>`/contacts`,\r\n      providesTags: ['Contacts'],\r\n    }),\r\n    deleteContacts: builder.mutation({\r\n      query: id=>({\r\n        url : `/contacts/${id}`,\r\n        method: 'DELETE',\r\n      }),\r\n       invalidatesTags: ['Contacts'],\r\n    }),\r\n    createContacts: builder.mutation({\r\n      query: newContacts=>({\r\n        url : `/contacts`,\r\n        method: 'DELETE',\r\n        body: newContacts,\r\n      }),\r\n       invalidatesTags: ['Contacts'],\r\n\r\n    })\r\n  }),\r\n})\r\n\r\nexport const { useFetchContactsQuery , useDeleteContactsMutation, useCreateContactsMutation } = contactsApi\r\n","import s from './Button.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Button({ label }) {\n  return (\n    <button className={s.formButton} type=\"submit\">\n      {label}\n    </button>\n  );\n}\nButton.propTypes = {\n  label: PropTypes.string,\n};\n","import s from './Input.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Input({ name, type, labelName, value, onChange }) {\n  return (\n    <label className={s.nameLabel}>\n      {labelName}\n      <input\n        className={s.contactsInput}\n        type={type}\n        name={name}\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\n\nInput.propTypes = {\n  name: PropTypes.string,\n  type: PropTypes.string,\n  labelName: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import { useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { formSubmithandle } from 'store/contactsSlice';\nimport {useCreateContactsMutation} from 'store/contactsApi'\n\nimport Button from 'components/Button';\nimport Input from 'components/Input';\nimport shortid from 'shortid';\n\nexport default function Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n  const contacts = useSelector(({ contacts }) => contacts);\n  const dispatch = useDispatch();\n  const [createContacts]= useCreateContactsMutation();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n//  console.log(e.target.value);\n// createContacts(e.currentTarget)\n contacts.some(contact => contact.name.includes(name))\n      ? alert(`${name} is already in contacts.`)\n             : createContacts({ name, number });\n      // : dispatch(formSubmithandle({ name, number }));\n    reset();\n    // contacts.some(contact => contact.name.includes(name))\n    //   ? alert(`${name} is already in contacts.`)\n    //   : dispatch(formSubmithandle({ name, number }));\n    // reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Input\n        labelName=\"Name\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={handleChange}\n        id={nameInputId}\n      />\n      <Input\n        labelName=\"Number\"\n        name=\"number\"\n        type=\"tel\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={handleChange}\n        id={numberInputId}\n      />\n      <Button label=\"Add contact\" onSubmit={formSubmithandle} />\n    </form>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'store/contactsSlice';\nimport { useFetchContactsQuery , useDeleteContactsMutation} from 'store/contactsApi'\nimport s from './ContactsList.module.css';\n\nconst ContactsList = () => {\n  const {data=[], isLoading, isFetching}= useFetchContactsQuery();\n  const [deleteContact, {isLoading : isDeleting}] = useDeleteContactsMutation();\n  //  const dispatch = useDispatch();\n   const contacts = useSelector(state => state.contacts);\n  const filterContact = useSelector(state => state.filterContact);\n\n  const visibleContacts = () => {\n    const normalizedFilter = filterContact.toLowerCase();\n    return data.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  const handleDeleteContacts = async (id)=> {\n    await deleteContact(id).unwrap();\n  };\n\n if(isLoading) return <h1>loading...</h1>\n  return (\n    <>\n      <ul>\n        {visibleContacts().map(({ id, name, phone }) => (\n          <li key={id} className={s.contactsListItem}>\n            <span> {name}: </span>\n            <span>{phone}</span>\n            <button\n              className={s.contactListBtn}\n              type=\"button\"\n              // onClick={() => dispatch(deleteContact(id))}\n               onClick= {()=>handleDeleteContacts(id)}\n              //  isLoading={isDeleting}\n            >\n           {\n          \n        isDeleting ? 'Deleting...' : 'Delete'\n           }   \n             \n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\nexport default ContactsList;\n","import { createSlice } from '@reduxjs/toolkit';\r\nconst initialState = '';\r\n\r\nconst filterSlice = createSlice({\r\n  name: 'filterContact',\r\n  initialState,\r\n  reducers: {\r\n    changeFilter: (_, action) => action.payload,\r\n  },\r\n});\r\nexport const { changeFilter } = filterSlice.actions;\r\nexport default filterSlice.reducer;\r\nconsole.log(changeFilter());\r\n","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'store/filterSlice';\n\nimport s from './Filter.module.css';\n\nexport default function Filter() {\n  const value = useSelector(state => state.filterContact);\n  console.log(value);\n  const dispatch = useDispatch();\n  return (\n    <label className={s.filterLabel}>\n      Find contacts by name\n      <input\n        className={s.filterInput}\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(changeFilter(e.target.value))}\n      />\n    </label>\n  );\n}\n","import Section from './components/Section';\nimport Form from './components/Form';\nimport ContactsList from 'components/ContactsList';\nimport Filter from 'components/Filter';\n\nexport default function App() {\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <Form />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactsList />\n      </Section>\n    </>\n  );\n}\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { setupListeners } from '@reduxjs/toolkit/query'\r\nimport contactsReducer from './contactsSlice';\r\nimport filterContactReducer from './filterSlice';\r\nimport {contactsApi} from './contactsApi';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n[contactsApi.reducerPath]: contactsApi.reducer,\r\n    filterContact: filterContactReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n//    [\r\n//  ...getDefaultMiddleware().contactsApi.middleware,\r\n//    ] ,\r\ngetDefaultMiddleware().concat(contactsApi.middleware)\r\n});\r\nsetupListeners(store.dispach);\r\n","import 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}